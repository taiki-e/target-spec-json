#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0 OR MIT
# shellcheck disable=SC2207
set -euo pipefail
IFS=$'\n\t'
cd "$(dirname "$0")"/..

# shellcheck disable=SC2154
trap 's=$?; echo >&2 "$0: error on line "${LINENO}": ${BASH_COMMAND}"; exit ${s}' ERR

# Generates code based on target-spec.
#
# USAGE:
#    ./tools/target_spec.sh
#
# This script is intended to be called by gen.sh, but can be called separately.

file="src/gen/target_spec.rs"
mkdir -p "$(dirname "${file}")"

target_arch=(
    # Architectures that do not included in builtin targets.
    # See also https://github.com/rust-lang/rust/blob/1.70.0/compiler/rustc_target/src/abi/call/mod.rs#L663
    # and https://github.com/rust-lang/rust/blob/1.70.0/src/bootstrap/lib.rs#L134.
    amdgpu
    asmjs
    nvptx
    spirv
    xtensa
)
target_os=(
    # Operating systems that do not included in builtin targets.
    hurd
)
target_env=(
    # Environments that do not included in builtin targets.
    # See also https://github.com/rust-lang/rust/blob/1.70.0/src/bootstrap/lib.rs#L131.
    libnx
)
rustc -Z unstable-options --print all-target-specs-json >tools/target-spec.json
for target_spec in $(jq <tools/target-spec.json -c '. | to_entries | .[].value'); do
    target_arch+=("$(jq <<<"${target_spec}" -r '.arch')")
    os=$(jq <<<"${target_spec}" -r '.os')
    if [[ "${os}" == "null" ]]; then
        os=none
    fi
    target_os+=("${os}")
    env=$(jq <<<"${target_spec}" -r '.env')
    if [[ "${env}" == "null" ]]; then
        env=none
    fi
    target_env+=("${env}")
done
# sort and dedup
IFS=$'\n'
target_arch=($(LC_ALL=C sort -u <<<"${target_arch[*]}"))
target_os=($(LC_ALL=C sort -u <<<"${target_os[*]}"))
target_env=($(LC_ALL=C sort -u <<<"${target_env[*]}"))
IFS=$'\n\t'

derive='#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]'
default() {
    cat <<EOF
impl $1 {
    #[allow(clippy::trivially_copy_pass_by_ref)]
    pub(crate) fn is_$2(&self) -> bool {
        matches!(self, Self::$2)
    }
}
impl Default for $1 {
    fn default() -> Self {
        Self::$2
    }
}
EOF
}
display() {
    cat <<EOF
impl core::fmt::Display for $1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str(self.as_str())
    }
}
EOF
}
as_str_arm() {
    echo -n "            Self::$1 => \"$1\","
}

cat >"${file}" <<EOF
// This file is @generated by $(basename "$0").
// It is not intended for manual editing.

#![allow(non_camel_case_types)]

use serde::{Deserialize, Serialize};

${derive}
#[non_exhaustive]
pub enum Arch {
$(sed <<<"${target_arch[*]}" -E 's/^/    /g; s/$/,/g')
}
impl Arch {
    pub fn as_str(self) -> &'static str {
        match self {
EOF
for arch in "${target_arch[@]}"; do
    as_str_arm "${arch}" >>"${file}"
    echo >>"${file}"
done
cat >>"${file}" <<EOF
        }
    }
}
$(display Arch)

${derive}
#[non_exhaustive]
pub enum Os {
$(sed <<<"${target_os[*]}" -E 's/^/    /g; s/$/,/g')
}
impl Os {
    pub fn as_str(self) -> &'static str {
        match self {
EOF
for os in "${target_os[@]}"; do
    as_str_arm "${os}" >>"${file}"
    echo >>"${file}"
done
cat >>"${file}" <<EOF
        }
    }
}
$(default Os none)
$(display Os)

${derive}
#[non_exhaustive]
pub enum Env {
$(sed <<<"${target_env[*]}" -E 's/^/    /g; s/$/,/g')
}
impl Env {
    pub fn as_str(self) -> &'static str {
        match self {
EOF
for env in "${target_env[@]}"; do
    if [[ "${env}" == "none" ]]; then
        echo '            Self::none => "",' >>"${file}"
    else
        as_str_arm "${env}" >>"${file}"
        echo >>"${file}"
    fi
done
cat >>"${file}" <<EOF
        }
    }
}
$(default Env none)
$(display Env)

${derive}
#[allow(clippy::exhaustive_enums)]
pub enum TargetEndian {
    big,
    little,
}
impl TargetEndian {
    pub fn as_str(self) -> &'static str {
        match self {
$(as_str_arm big)
$(as_str_arm little)
        }
    }
}
$(default TargetEndian little)
$(display TargetEndian)

${derive}
#[allow(clippy::exhaustive_enums)]
pub enum PanicStrategy {
    abort,
    unwind,
}
impl PanicStrategy {
    pub fn as_str(self) -> &'static str {
        match self {
$(as_str_arm abort)
$(as_str_arm unwind)
        }
    }
}
$(default PanicStrategy unwind)
$(display PanicStrategy)
EOF
